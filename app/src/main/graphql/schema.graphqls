type User {
  id: ID!

  firstName: String!

  lastName: String!

  email: String!

  phoneNumber: String!

  userType: String!

  company: Company

  cards: [Card]

  defaultCard: Card
}

type AuthPayload {
  token: String!

  user: User
}

type UserResponse {
  success: Boolean!

  message: String

  data: User
}

type UsersResponse {
  success: Boolean!

  message: String

  data: [User!]!
}

type AuthResponse {
  success: Boolean!

  message: String

  data: AuthPayload
}

type Query {
  getUsers: UsersResponse!

  getUser(id: ID): UserResponse!

  getDriver(id: ID): DriverResponse

  getDrivers: DriversResponse

  getCompany(id: ID!): CompanyResponse

  getCompanies: CompaniesResponse

  getCar(id: ID!): CarResponse!

  getCars: CarListResponse!

  getLocation(id: ID!): LocationResponse

  getLocations(type: String): LocationsResponse

  getRoute(id: ID!): RouteResponse

  getRoutes: RoutesData

  getTrip(id: ID!): TripResponse

  getTrips: TripsResponse!

  getTripsByDriver(driverId: ID): TripsResponse!

  hello: String

  getBooking(id: ID!): BookingResponse!

  getBookingsByUser(userId: ID): BookingsResponse!

  getBookings(tripId: ID): BookingsResponse!

  getPayment(id: ID!): PaymentResponse!

  getPaymentsByUser: PaymentsResponse!

  getSchedule(id: ID!): ScheduleResponse!

  getSchedules: SchedulesResponse!

  getUserSchedules(userId: ID): SchedulesResponse!

  getTripPreset(id: ID!): TripPresetResponse!

  getTripPresets: TripPresetListResponse!

  getPosMachine(id: ID!): PosMachineResponse!

  getPosMachines: PosMachineListResponse!

  getCards: CardsResponse!

  getCard(nfcId: ID!): CardResponse!

  getWallet(id: ID!): WalletResponse!

  getWallets: WalletListResponse!
}

type ChangePasswordResponse {
  success: Boolean!

  message: String!
}

type Mutation {
  registerUser(firstName: String!, lastName: String!, email: String!, phoneNumber: String!, password: String!, userType: String = "customer", companyId: ID): AuthResponse!

  loginUser(email: String!, password: String!): AuthResponse!

  updateUser(id: ID, firstName: String, lastName: String, email: String, phoneNumber: String, userType: String, companyId: ID): UserResponse!

  deleteUser(id: ID!): UserResponse!

  changePassword(currentPassword: String, newPassword: String!, userId: ID): ChangePasswordResponse!

  updateDefaultCard(nfcId: String): UserResponse!

  registerDriver(name: String!, email: String!, phoneNumber: String!, type: String!, license: String!, companyId: ID, password: String!): DriverAuthPayload!

  loginDriver(email: String!, password: String!): DriverAuthPayload!

  updateDriver(id: ID, name: String, email: String, phoneNumber: String, type: String, license: String, companyId: ID, car: ID): DriverResponse!

  deleteDriver(id: ID!): DriverResponse!

  registerCompany(name: String!, location: String!, email: String!): CompanyResponse!

  updateCompany(id: ID!, name: String, location: String, email: String): CompanyResponse!

  deleteCompany(id: ID!): CompanyResponse!

  registerCar(plateNumber: String!, numberOfSeats: Int!, ownerCompanyId: ID, privateOwner: String, driverId: ID, isOccupied: Boolean, userId: ID): CarResponse!

  updateCar(id: ID!, plateNumber: String, numberOfSeats: Int, ownerCompanyId: ID, privateOwner: String, driverId: ID, isOccupied: Boolean): CarResponse!

  deleteCar(id: ID!): CarResponse!

  addLocation(name: String!, type: String!, coordinates: CoordinatesInput!, address: String!, googlePlaceId: String!): LocationResponse!

  updateLocation(id: ID!, name: String, type: String, coordinates: CoordinatesInput, address: String, googlePlaceId: String): LocationResponse!

  deleteLocation(id: ID!): LocationResponse!

  addRoute(originId: ID!, destinationId: ID!, googleMapsRouteId: String!, price: Float!): RouteResponse!

  deleteRoute(id: ID!): RouteResponse!

  addTrip(routeId: ID!, carId: ID!, boardingTime: String!, status: String, stopPoints: [StopPointPriceInput], reverseRoute: Boolean): TripResponse!

  deleteTrip(id: ID!): TripResponse!

  updateTrip(id: ID!, routeId: ID, carId: ID, boardingTime: String, status: String, availableSeats: Int, stopPoints: [StopPointPriceInput], reverseRoute: Boolean): TripResponse!

  addBooking(tripId: ID!, destination: String!, numberOfTickets: Int!, price: Float!, nfcId: String): BookingResponse!

  deleteBooking(id: ID!): DeleteBookingResponse!

  updateBookingStatus(id: ID!, status: String): BookingResponse!

  createPayment(bookingId: ID!, phoneNumber: String!): PaymentResponse!

  createSchedule(originId: ID!, destinationId: ID!, time: String!): ScheduleResponse!

  updateSchedule(id: ID!, originId: ID, destinationId: ID, time: String, status: String): ScheduleResponse!

  deleteSchedule(id: ID!): ScheduleResponse!

  addTripPreset(routeId: ID!, stopPoints: [StopPointPriceInput!], reverseRoute: Boolean, presetName: String!): TripPresetResponse!

  updateTripPreset(id: ID!, input: UpdateTripPresetInput!): TripPresetResponse!

  deleteTripPreset(id: ID!): TripPresetResponse!

  registerPosMachine(serialNumber: String!, carPlate: String!, password: String!): PosMachineResponse!

  updatePosMachine(serialNumber: String, status: String, plateNumber: String): PosMachineResponse!

  deletePosMachine(id: ID!): PosMachineResponse!

  regeneratePosToken(refreshToken: String!): PosMachineResponse!

  createCard(nfcId: String!, email: String, phone: String, firstName: String, lastName: String): CardResponse!

  updateCard(id: ID!, nfcId: String, userId: ID): CardResponse!

  deleteCard(id: ID!): CardResponse!

  createWallet(userId: ID, nfcId: ID): WalletResponse!

  updateWallet(nfcId: ID!, transaction: WalletTransactionInput!): WalletResponse!

  deleteWallet(id: ID!): WalletResponse!
}

type Driver {
  id: ID!

  name: String!

  email: String!

  phoneNumber: String!

  type: String!

  license: String

  company: Company

  car: Car

  createdAt: String!
}

type DriverAuthPayload {
  success: Boolean!

  message: String

  token: String

  driver: Driver
}

type DriverResponse {
  success: Boolean!

  message: String

  data: Driver
}

type DriversResponse {
  success: Boolean!

  message: String

  data: [Driver!]!
}

type Company {
  id: ID!

  name: String!

  location: String!

  email: String!

  createdAt: String
}

type CompanyResponse {
  success: Boolean!

  message: String

  data: Company
}

type CompaniesResponse {
  success: Boolean!

  message: String

  data: [Company]
}

type Car {
  id: ID!

  plateNumber: String!

  numberOfSeats: Int!

  ownerCompany: Company

  privateOwner: String

  driver: Driver

  isOccupied: Boolean!

  user: User!

  createdAt: String!
}

type CarResponse {
  success: Boolean!

  message: String

  data: Car
}

type CarListResponse {
  success: Boolean!

  message: String

  data: [Car!]
}

type Location {
  id: ID!

  name: String!

  type: String!

  coordinates: Coordinates!

  address: String!

  googlePlaceId: String!

  createdAt: String!
}

type Coordinates {
  lat: Float!

  lng: Float!
}

type LocationResponse {
  success: Boolean!

  message: String

  data: Location
}

type LocationsResponse {
  success: Boolean!

  message: String

  data: [Location]
}

input CoordinatesInput {
  lat: Float!

  lng: Float!
}

type Route {
  id: ID!

  origin: Location!

  destination: Location

  googleMapsRouteId: String!

  price: Float!

  createdAt: String!
}

type RouteResponse {
  success: Boolean!

  message: String

  data: Route
}

type RoutesData {
  data: [Route!]!

  success: Boolean!

  message: String
}

type StopPointPrice {
  location: Location!

  price: Float!
}

type Trip {
  id: ID!

  route: Route!

  car: Car!

  boardingTime: String!

  status: String!

  user: User!

  availableSeats: Int!

  stopPoints: [StopPointPrice]

  reverseRoute: Boolean!

  createdAt: String!
}

type TripResponse {
  success: Boolean!

  message: String

  data: Trip
}

type TripsResponse {
  success: Boolean!

  message: String

  data: [Trip]
}

input StopPointPriceInput {
  locationId: ID!

  price: Float!
}

type Booking {
  id: ID!

  user: User!

  trip: Trip!

  destination: String!

  numberOfTickets: Int!

  price: Float!

  card: Card

  createdAt: String!

  status: String!

  ticket: Ticket

  pos: PosMachine
}

type Ticket {
  id: ID!

  booking: Booking!

  user: User!

  trip: Trip!

  qrCodeData: String!

  nfcId: String!

  validFrom: String!

  validUntil: String!
}

type BookingResponse {
  success: Boolean!

  message: String

  data: Booking
}

type BookingsResponse {
  success: Boolean!

  message: String

  data: [Booking!]
}

type DeleteBookingResponse {
  success: Boolean!

  message: String

  data: String
}

type Subscription {
  bookingAdded(tripId: ID!): Booking!

  bookingUpdated: Booking!
}

type Payment {
  id: ID!

  booking: Booking!

  amountPaid: Float!

  paymentStatus: String!

  car: Car!

  paymentDate: String

  name: String!

  user: User!
}

type PaymentResponse {
  success: Boolean!

  message: String

  data: Payment
}

type PaymentsResponse {
  success: Boolean!

  message: String

  data: [Payment!]!
}

type Schedule {
  id: ID!

  user: User!

  origin: Location!

  destination: Location!

  time: String!

  matchedRoutes: [Route]

  originType: String

  destinationType: String

  status: String

  constructedRoutes: [Route]

  createdAt: String!

  updatedAt: String!
}

type ScheduleResponse {
  success: Boolean!

  message: String

  data: Schedule
}

type SchedulesResponse {
  success: Boolean!

  message: String

  data: [Schedule!]!
}

scalar DateTime

type TripPreset {
  id: ID!

  route: Route!

  stopPoints: [StopPointPrice!]!

  reverseRoute: Boolean!

  presetName: String!

  user: User!

  company: Company!

  createdAt: DateTime!

  updatedAt: DateTime!
}

type TripPresetResponse {
  success: Boolean!

  message: String

  data: TripPreset
}

type TripPresetListResponse {
  success: Boolean!

  message: String

  data: [TripPreset!]
}

input UpdateTripPresetInput {
  routeId: ID

  stopPoints: [StopPointPriceInput!]

  reverseRoute: Boolean

  presetName: String
}

type PosMachine {
  id: ID!

  serialNumber: String!

  status: String!

  linkedCar: Car

  assignedDate: String

  lastActivityDate: String

  user: User!

  createdAt: String!

  updatedAt: String!
}

type PosMachineResponse {
  success: Boolean!

  message: String

  data: PosMachine

  token: String

  refreshToken: String
}

type PosMachineListResponse {
  success: Boolean!

  message: String

  data: [PosMachine!]
}

type Card {
  id: ID!

  nfcId: String!

  user: User

  creator: User!

  createdAt: String!

  cardId: String!

  active: Boolean!

  wallet: Wallet
}

type CardResponse {
  success: Boolean!

  message: String

  data: Card
}

type CardsResponse {
  success: Boolean!

  message: String

  data: [Card!]!
}

type WalletTransaction {
  type: String!

  amount: Float!

  description: String

  date: DateTime!
}

type Wallet {
  id: ID!

  user: User!

  card: Card!

  balance: Float!

  transactions: [WalletTransaction!]!

  createdAt: DateTime!

  updatedAt: DateTime!
}

type WalletResponse {
  success: Boolean!

  message: String

  data: Wallet
}

type WalletListResponse {
  success: Boolean!

  message: String

  data: [Wallet!]
}

input WalletTransactionInput {
  type: String!

  amount: Float!

  description: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  isOneOf: Boolean
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
